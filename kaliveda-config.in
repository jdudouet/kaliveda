#!/usr/bin/env bash
# -*- sh-indentation: 3 -*-
# @configure_input@
# Do not modify this file. It will be regenerated by ./configure
# This script returns the machine dependent compile options needed
# to compile and link applications using the KaliVeda libraries.
#
# Based on root-config.in by:
# Author: Fons Rademakers, 06/06/99

get_lib_list()
{
   # fill $lib_list with all installed libraries
   # we look for 'lib*.so' symbolic links
   # we check that it points to an existing file
   #
   # $1 = KVMultiDet etc.
   # $2 = /usr/lib etc.
   tmp3=""
   libextent=".so"
   if [ @APPLE@ ] ; then libextent=".dylib" ; fi
   unset lib_list
   tmp=`find $2 -name 'lib'$1'*'${libextent} -type l ! -name '*[0-9]*'`
   #echo $tmp
   for file in $tmp
   do
   	#echo $file
      if [ -e "$file" ]; then
           tmp2=`basename $file ${libextent}`
         #echo $tmp2
   	   tmp3="$tmp2 $tmp3"
   	fi
   done   
	lib_list=`echo $tmp3 | sed 's/lib'$1'/-l'$1'/g'`
}

readlink=readlink
if [ `uname` = "AIX" ]; then
   readlink=echo
fi

# work around readlink versions not having -f option
fullpath1=`$readlink $0`
if [ "$?" -ne "0" ]; then
   fullpath1=$0
else
   if [ ${fullpath1##/} = $fullpath1 ] && [ ${fullpath1##~} = $fullpath1 ]; then
      # relative path, prepend directory where executable was found
      lpath=`dirname $0`
      fullpath1=$lpath/$fullpath1
   fi
fi
progdir=`dirname $fullpath1`
runningdir=`pwd`
if [ ${progdir##/} != $progdir ] || [ ${progdir##~} != $progdir ]; then
   # absolute path
   fullpath=$progdir
else
   # relative path
   if [ $progdir != "." ]; then
      fullpath=$runningdir/$progdir
   else
      fullpath=$runningdir
   fi
fi
# work around readlink versions not having -f option
fullpath1=`$readlink $fullpath`
if [ "$?" -ne "0" ]; then
   fullpath1=$fullpath
fi

VERSION="@KV_VERSION_STRING@"
srcdir=@CMAKE_SOURCE_DIR@
buildir=@CMAKE_BINARY_DIR@
libdir=@CMAKE_INSTALL_FULL_LIBDIR@
incdir=@CMAKE_INSTALL_FULL_INCLUDEDIR@
bindir=@CMAKE_INSTALL_FULL_BINDIR@
kaliveda_exec=$bindir/kaliveda
examplesdir=@CMAKE_INSTALL_FULL_TUTDIR@
root_cflags=$(root-config --cflags)
root_libs=$(root-config --glibs)
# get list of all installed libraries
modules="@subprojlist@"
libs=""
for module in $modules; do
   get_lib_list $module "$libdir"
   libs="$libs $lib_list"
done

usage="\
Usage: `basename $0` [--version] [--libs] [--incdir] [--libdir] [--bindir]\n\
           [--cflags] [--linklibs] [--buildir] [--srcdir] [--examples] [--gitinfos] [--help]"

if test $# -eq 0; then
   echo -e "${usage}" 1>&2
   exit 1
fi

out=""

while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *)    optarg= ;;
  esac

  case $1 in
    --has-*)
      ### Check for feature
      f=`echo $1 | sed 's/--has-//'`
      for c in $features ; do
         if test "x$c" = "x$f" ; then
            out="$out yes"
            break
         fi
         c=""
      done
      if test "x$c" = "x" ; then
         out="$out no"
      fi
      ;;
    --version)
      ### Output the version number.
      out="$out $VERSION"
      ;;
    --bindir)
      ### output the executable directory
      out="$out $bindir"
      ;;
    --buildir)
      ### output the build directory
      out="$out $buildir"
      ;;
    --srcdir)
      ### output the source directory
      out="$out $srcdir"
      ;;
    --libdir)
      ### output the library directory
      out="$out $libdir"
      ;;
    --incdir)
      ### output the header directory
      out="$out $incdir"
      ;;
    --examples)
      ### output the examples directory
      out="$out $examplesdir"
      ;;
    --gitinfos)
      ### output git infos
            git_infos=`$kaliveda_exec --gitinfos`
            out="$out $git_infos"
            ;;
    --libs)
      ### output all libraries for linking
      out="$out $libs"
      ;;
    --cflags)
      ### output all flags for compiling
      out="$out -I$incdir $root_cflags"
      ;;
    --linklibs)
      ### output all flags for linking
      out="$out -L$libdir $libs"
      if [ @APPLE@ ] ; then out="$out -Wl,-rpath,$libdir" ; fi
      out="$out $root_libs"
      ;;
    --help)
      ### Print a help message
      echo "Usage: `basename $0` [options]"
      echo ""
      echo "  --version             Print the KaliVeda version"
      echo "  --bindir              Print the executable directory"
      echo "  --libdir              Print the library directory"
      echo "  --incdir              Print the header directory"
      echo "  --libs                Print linker directives for all libraries"
      echo "  --builddir            Print the CMake build directory"
      echo "  --srcdir              Print the source directory"
      echo "  --gitinfos            Print the git branch and commit"
      echo "  --examples            Print the examples directory"
      echo "  --cflags              Print all flags for compiling (including ROOT flags)"
      echo "  --linklibs            Print all directives for linking (including ROOT libs)"
      echo "  --help                Print this message"
      exit 0
      ;;
    *)
      ### Give an error
      echo "Unknown argument \"$1\"!" 1>&2
      echo "${usage}" 1>&2
      exit 1
      ;;
  esac
  shift
done

### Output the stuff
echo $out
