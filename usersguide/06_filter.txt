% KaliVeda User's Guide

# Simulating detector response (Filtering) #

We can 'filter' simulated data either in order to establish the geometrical (or other)
efficiency of a given experimental set-up, or to make a comparison between
theoretical predictions and measured data which includes the biases and distortions
introduced by the experimental apparatus. 

## Simulating the detection of an event ##

In the KaliVeda framework, a complete
description of some experimental set-up is given by an instance of the
[`KVMultiDetArray`{.cpp}][KVMultiDetArray] class; theoretical or simulated data are
stored in collections of [`KVSimEvent`{.cpp}][KVSimEvent] objects; and experimental
data reconstructed from measured energy losses *etc.* are handled by
[`KVReconstructedEvent`{.cpp}][KVReconstructedEvent] objects.^[Note that both of the latter
classes inherit the common base class [`KVEvent`{.cpp}][KVEvent]]
The method which simulates the detection and reconstruction of simulated heavy-ion
collisions is

~~~~~~~{.cpp}
void KVMultiDetArray::DetectEvent(KVEvent* input, KVReconstructedEvent* output, const char* det_frame = "")
~~~~~~~

where 

* `KVEvent* input`{.cpp} is the simulated data event to be treated;
* `KVReconstructedEvent* output`{.cpp} is the reconstructed event which will be filled with the
   result of the detection and reconstruction; 
* `const char* det_frame`{.cpp} is an optional argument which can be used to indicate the name of
   the kinematical reference frame to be used for calculating particles' energy losses in
	detectors, in case their default reference frame does not coincide with the laboratory/detector
	frame (see [Defining kinematical reference frames][Kinematics]). 

## Options controlling filter behaviour ##
### Filter type ###

There are many possible replies to the question 'What does a filter do?'.
Three of them are implemented as types of filter which can be chosen by calling
the method

~~~~~~~{.cpp}
void KVMultiDetArray::SetFilterType(Int_t)
~~~~~~~~

with one of these values:

`KVMultiDetArray::kFilterType_Geo`{.cpp} (Geometric filter)

:   Simulate effects of detector geometry on simulated events.

    All charged particles with non-zero kinetic energy in the
    detector reference frame are kept if their initial trajectory would hit at least
	 1 detector in the array. Each such particle is copied into the reconstructed
	 'detected' event with its simulated $Z$, $A$, and kinetic energy,
	 but its direction of motion is drawn at random within the acceptance of the hit detector.
	 
	 No treatment of pile-up in detectors/telescopes, i.e. if 4 particles all hit the same
	 detector, they will all be counted as 'well identified'. Also if a particle
	 stops in the first stage of a $\Delta E$-$E$ telescope, it is considered
	 'well identified'.

`KVMultiDetArray::kFilterType_GeoThresh`{.cpp} (Geometry + thresholds)

:   Geometric filter with thresholds: charged particles are considered
    'detected & well identified' if they have enough energy to leave the target
	 (if present),
    and if their remaining energy is sufficient
	 to punch-through the first stage of a $\Delta E$-$E$ telescope in the array.
	 
	 

`KVMultiDetArray::kFilterType_Full`{.cpp} (Full simulation of experimental events)

:   Full simulation of detection of particles by the array. the calibration parameters
    for the chosen run are inverted in order to calculate raw acquisition data.

### Geometry type ###

By default, the ROOT geometry package is used to calculate particle trajectories through
multidetector array geometries. 

## Filter output: simulated event and particles ##
### Detection status of simulated particles ###

After filtering, the simulated event whose address was given as first argument
to `KVMultiDetArray::DetectEvent`{.cpp} (see [Simulating the detection of an event])
will contain full information on the 'detection' of each particle.

Particles are sorted into groups according to detection status
(see [Labelling & sorting particles][ParticleGroups]),
and parameters are added to each particle (see [Adding parameters to particles][ParticleParams])
containing all other information such as the list of
detectors seen by the particle, its energy loss in each, where it stopped,
*etc. etc.*

#### Detection Status Group ####

The groups to which a particle is affected can be listed by calling method
`KVParticle::ListGroups()`{.cpp}. See [Labelling & sorting particles][ParticleGroups]
for details on using particle groups.

UNDETECTED

:   Detection and/or identification of particle failed.
    To give additional information on the reason for this failure,
    the particle will also be classed in one of the following groups:

    NEUTRON
      ~ 
    NO ENERGY
      ~ particle with zero kinetic energy in the reference frame of the detector
    STOPPED IN TARGET
      ~ 
    DEAD ZONE
      ~ particle failed to interact with the active layer of any detector
    GEOMETRY INCOHERENCY
      ~ (only when using KaliVeda geometry --- see [Geometry type]): particle
		undetected by array, after correction for over-simplistic geometry description
		(status would have been __DEAD ZONE__ if geometry description was better).
    THRESHOLD
      ~ particle stopped before reaching active layer of first detector encountered 

DETECTED

:   Particle detection was successful, and at least partial identification is possible.

    INCOMPLETE
      ~ complete particle identification impossible, for one of the following reasons:
		
		* particle stopped in the first member of a $\Delta E$-$E$ telescope;
		* (for filter type **Geometry+Thresholds**) energy deposited in the active layer of the first member of a
		  $\Delta E$-$E$ telescope is theoretically insufficient for correct identification
		  (see method [`KVIDTelescope::CheckTheoreticalIdentificationThreshold`{.cpp}][CheckIdentificationThreshold]).
		  
    PUNCH THROUGH
      ~ particle was detected, but not stopped by the array, punching through
		the last detector on its trajectory

#### Particle Detection Parameters ####

The list of parameters (a [`KVNameValueList`{.cpp}][KVNameValueList] object)
associated with a particle can be accessed via method
`KVNameValueList* KVParticle::GetParameters()`{.cpp}. It is also displayed
when `KVParticle::Print()`{.cpp} is called. For more details, see
[Adding parameters to particles][ParticleParams].

TARGET Out
  ~ energy lost by particle in the target (if present)
STOPPING DETECTOR
  ~ name of the detector where particle stopped (or last detector seen by particle,
    if particle has status __PUNCH THROUGH__)
IDENTIFYING TELESCOPE
  ~ name of the identification telescope which would identify the particle
DETECTED
  ~ if particle was detected and at least partial identification is possible
    (i.e. has status group __DETECTED__),
    this parameter will exist and have one of the following values, which,
    apart from __OK__, reflect the [Detection Status Group] of the particle:
  * __DETECTED__=__OK__ : no detection/identification problem
  * __DETECTED__=__INCOMPLETE__
  * __DETECTED__=__PUNCH THROUGH__
	 
UNDETECTED
  ~ if particle detection was unsuccessful (i.e. with status group __UNDETECTED__)
    this parameter will exist and have one of the following values
    reflecting the [Detection Status Group] of the particle:
  * __UNDETECTED__=__NEUTRON__
  * __UNDETECTED__=__NO ENERGY__
  * __UNDETECTED__=__STOPPED IN TARGET__
  * __UNDETECTED__=__DEAD ZONE__
  * __UNDETECTED__=__GEOMETRY INCOHERENCY__
  * __UNDETECTED__=__THRESHOLD__

## Filter output: reconstructed event and particles ##

Depending on the informations on particle detection stored in the simulated event,
and on the selected [Filter type], the [`KVReconstructedEvent`{.cpp}][KVReconstructedEvent] object
will contain a reconstructed nucleus for each detected particle.

Geometric filter

:   All particles with [Detection Status Group] `DETECTED` or `STOPPED IN TARGET` or `THRESHOLD`
    are reconstructed and considered to be well-identified. The charge, mass, and energy of the
	 detected particle are the same as that of the simulated particle. The direction of motion 
	 (in the laboratory/detector frame) are randomised over the surface of the detector in which
	 the particle stopped.
	 
	 A check is made for pile-up in the stopping detector. Two or more particles stopping in
	 the same detector will lead to the creation of as many reconstructed nuclei in the event,
	 which could not occur experimentally: the different particles would be seen as one 'hit'.
	 In this case, all but one of the particles which stop in the same detector will be given
	 the status `KVReconstructedNucleus::kStatusPileupGhost`{.cpp}.
	 
[KVMultiDetArray]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVMultiDetArray.html
[KVSimEvent]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVSimEvent.html
[KVReconstructedEvent]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVReconstructedEvent.html
[KVEvent]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVEvent.html
[KVNameValueList]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVNameValueList.html

[Kinematics]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVParticle.html
[ParticleGroups]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVParticle.html
[ParticleParams]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVParticle.html
[CheckIdentificationThreshold]: http://indra.in2p3.fr/kaliveda/doc/CLASS_DOC_BRANCH/classKVIDTelescope.html
