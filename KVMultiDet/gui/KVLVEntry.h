/*
$Id: KVLVEntry.h,v 1.3 2009/04/28 09:11:29 franklan Exp $
$Revision: 1.3 $
$Date: 2009/04/28 09:11:29 $
*/

//Created by KVClassFactory on Wed Apr  9 13:55:03 2008
//Author: franklan

#ifndef __KVLVENTRY_H
#define __KVLVENTRY_H

#include "TGListView.h"
#include "TFunction.h"
#include "KVLVContainer.h"

/**
\class KVLVEntry
\brief One item/line in a KVListView window
\ingroup GUI

\image http http://indra.in2p3.fr/kaliveda/images/KVLVContainer.png

<h3>Example of use</h3>
KVListView takes a list of objects (TObject or derived class) and presents them
as a list of items with different data for each object presented in separate columns.
The user specifies the base-class of the objects to display, the number of columns,
and the data to be presented in each column. The example in the figure shown above
was generated by the following:
<pre>
   lvRuns = new KVListView(<a href="KVDBRun.html">KVDBRun</a>::Class(), cfRuns, 500, 250); //create list view for KVDBRun objects. 'cfRuns' is pointer to GUI frame containing the list.
   lvRuns->SetDataColumns(4); //set number of columns to 4

   lvRuns->SetDataColumn(0, "Run", "GetNumber");       //by default, the data presented in a column with title "Toto" will be retrieved
   lvRuns->SetDataColumn(1, "Events", "", kTextRight); //from each object by calling the "GetToto" method of the class given to the KVListView ctor.
   lvRuns->SetDataColumn(2, "Date", "GetDatime");      //in case the "getter" method has a non-standard name, it can be given explicitly.

   lvRuns->GetDataColumn(2)-><a href="KVLVColumnData.html#KVLVColumnData:SetIsDateTime">SetIsDateTime()</a>;//some special treatment is afforded to date/time data. see method doc.
   lvRuns->SetDataColumn(3, "Comments", "", kTextLeft);// specify text alignment for data


   lvRuns->ActivateSortButtons();//when clicking a column header, the list is sorted according to that column's data.
   ...                           //clicking a second time the same column sorts objects in the opposite sense.
</pre>
To display objects, put them in a TList and call
<pre>
   lvRuns->Display( pointer_to_TList );
</pre>
Items in the list can be selected using either:
      <ul>
      <li>single left click (single object selection),</li>
      <li>CTRL+left-click (selection of multiple non-neighbouring objects),</li>
      <li>or SHIFT+left-click (selection of multiple & neighbouring objects)</li>
      </ul>
When the selection changes, the KVListView emits the <pre>SelectionChanged()</pre> signal.<br>
The list of the currently selected objects can be retrieved with the method <pre>GetSelectedItems()</pre>,
      which returns a TList of the currently selected <a href="KVLVEntry.html">KVLVEntry</a> objects,
      each one's name corresponds to the value displayed in the first column of the list view.<br>
Double-left-clicking an object will execute the <pre>Browse()</pre> method of the object. This method is defined for all TObjects,
it can be overridden in derived classes in order to do something interesting and/or useful.<br>
Right-clicking an object opens the context menu of the object, allowing the usual interaction with objects as in TBrower, TCanvas, etc.
*/

class KVLVEntry : public TGLVEntry {

protected:
   Bool_t fEditMode;
   Bool_t fColoured;//=kTRUE if object has an associated color

   static Pixel_t fgBGColor;// current background color for items
   static Pixel_t fgGreyPixel;// light grey color used to distinguish adjacent list items
   Pixel_t fBGColor;// background color of this item

   Bool_t* fBoolean;//'IsBoolean' attribute of each column

   Bool_t fDisconnectRefresh;//! disconnect object's Modified method from this object's Refresh when deleted

public:
   KVLVEntry(TObject* obj, const KVLVContainer* cnt,
             UInt_t ncols, KVLVColumnData** coldata);
   KVLVEntry(TObject* obj, const Char_t* objclass, const KVLVContainer* cnt,
             UInt_t ncols, KVLVColumnData** coldata);
   virtual ~KVLVEntry();

   virtual void Refresh();
   virtual void   DrawCopy(Handle_t id, Int_t x, Int_t y);
   void SetEditMode(Bool_t edit = kTRUE)
   {
      fEditMode = edit;
   }

   ClassDef(KVLVEntry, 0) //List view item class
};

#endif
